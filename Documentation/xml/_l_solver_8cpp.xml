<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="_l_solver_8cpp" kind="file" language="C++">
    <compoundname>LSolver.cpp</compoundname>
    <includes refid="_l_solver_8h" local="yes">LSolver.h</includes>
    <incdepgraph>
      <node id="20">
        <label>IFollowerSwapRule.h</label>
        <link refid="_i_follower_swap_rule_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ILeaderSelectRule.h</label>
        <link refid="_i_leader_select_rule_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ISolver.h</label>
        <link refid="_i_solver_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ISubSolver.h</label>
        <link refid="_i_sub_solver_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Instance.h</label>
        <link refid="_instance_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>Job.h</label>
        <link refid="_job_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Users/benhi/source/repos/BiLevel_Scheduling_Industry_4.0/BiLevel_Scheduling_Industry_4.0/LSolver.cpp</label>
        <link refid="_l_solver_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>LSolver.h</label>
        <link refid="_l_solver_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Machine.h</label>
        <link refid="_machine_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>Rule.h</label>
        <link refid="_rule_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Solution.h</label>
        <link refid="_solution_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Verbose.h</label>
        <link refid="_verbose_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>algorithm</label>
      </node>
      <node id="9">
        <label>filesystem</label>
      </node>
      <node id="12">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>ostream</label>
      </node>
      <node id="11">
        <label>random</label>
      </node>
      <node id="15">
        <label>stdexcept</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_l_solver_8h" kindref="compound">LSolver.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_solver_1ae4809ba8f95b5966a513e3380ee2a696" kindref="member">LSolver::solve</ref>()</highlight></codeline>
<codeline lineno="4"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>of<sp/>best<sp/>solution<sp/>for<sp/>each<sp/>Leader&apos;s<sp/>decision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Solution&gt;<sp/>follower_solutions;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::steady_clock::time_point<sp/>timeStart<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>Leader<sp/>applies<sp/>each<sp/>selection<sp/>rule<sp/>as<sp/>its<sp/>decision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_i_leader_select_rule" kindref="compound">ILeaderSelectRule</ref>*<sp/>selectRule<sp/>:<sp/><ref refid="class_i_solver_1a4efd4b920c5613c64a6dc4e4b13ee335" kindref="member">listRules</ref>)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a9f7fc485cd3e1456dd1da5fe42e2f9c3" kindref="member">verbose</ref>.<ref refid="class_verbose_1acc7a995da9e05168fa881f0d3ada8250" kindref="member">setRequiredLevel</ref>(3);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a9f7fc485cd3e1456dd1da5fe42e2f9c3" kindref="member">verbose</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Applying<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>selectRule-&gt;getRuleName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>as<sp/>Leader&apos;s<sp/>decision<sp/>criterion\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a9f7fc485cd3e1456dd1da5fe42e2f9c3" kindref="member">verbose</ref>.<ref refid="class_verbose_1a48a6ad9f4c7d2541aa87fd3b9374c65d" kindref="member">endRequiredLevel</ref>();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>subset<sp/>of<sp/>jobs<sp/>chosen<sp/>by<sp/>the<sp/>Leader&apos;s<sp/>selection<sp/>rule</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Job&gt;<sp/>chosenJobs<sp/>=<sp/>selectRule-&gt;selectJobsFrom(*<ref refid="class_i_solver_1a56e3d4fb8bf0845abb09432b88e04a09" kindref="member">instance</ref>);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Follower&apos;s<sp/>heuristic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a7a89e270fa895524d4bf94cd10189bc8" kindref="member">subSolver</ref>-&gt;<ref refid="class_i_sub_solver_1a3a1fe2f8a959e8cc725715d08e8361c2" kindref="member">generateInitialSolution</ref>(chosenJobs,<sp/>*<ref refid="class_i_solver_1a56e3d4fb8bf0845abb09432b88e04a09" kindref="member">instance</ref>);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>init_score<sp/>=<sp/><ref refid="class_i_solver_1a7a89e270fa895524d4bf94cd10189bc8" kindref="member">subSolver</ref>-&gt;<ref refid="class_i_sub_solver_1a3e4ed988e91a7ccd3e69fa60f7c563b1" kindref="member">getSolution</ref>()-&gt;<ref refid="class_solution_1ab042499bb5b5ba01477099aeee3b787f" kindref="member">getSumWjUj</ref>();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a7a89e270fa895524d4bf94cd10189bc8" kindref="member">subSolver</ref>-&gt;<ref refid="class_i_sub_solver_1aabcd791e0b699d2afec42a5c538eb241" kindref="member">heuristic</ref>();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>final_score<sp/>=<sp/><ref refid="class_i_solver_1a7a89e270fa895524d4bf94cd10189bc8" kindref="member">subSolver</ref>-&gt;<ref refid="class_i_sub_solver_1a3e4ed988e91a7ccd3e69fa60f7c563b1" kindref="member">getSolution</ref>()-&gt;<ref refid="class_solution_1ab042499bb5b5ba01477099aeee3b787f" kindref="member">getSumWjUj</ref>();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a9f7fc485cd3e1456dd1da5fe42e2f9c3" kindref="member">verbose</ref>.<ref refid="class_verbose_1acc7a995da9e05168fa881f0d3ada8250" kindref="member">setRequiredLevel</ref>(3);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a9f7fc485cd3e1456dd1da5fe42e2f9c3" kindref="member">verbose</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Taux<sp/>d&apos;amelio<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(init_score<sp/>==<sp/>0<sp/>?<sp/>1<sp/>:<sp/>(init_score<sp/>-<sp/>final_score)<sp/>/<sp/>init_score)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a9f7fc485cd3e1456dd1da5fe42e2f9c3" kindref="member">verbose</ref>.<ref refid="class_verbose_1a48a6ad9f4c7d2541aa87fd3b9374c65d" kindref="member">endRequiredLevel</ref>();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>save<sp/>the<sp/>best<sp/>solution<sp/>found<sp/>by<sp/>the<sp/>follower</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_solution" kindref="compound">Solution</ref><sp/>follower_bestSolution<sp/>=<sp/>*(<ref refid="class_i_solver_1a7a89e270fa895524d4bf94cd10189bc8" kindref="member">subSolver</ref>-&gt;<ref refid="class_i_sub_solver_1a3e4ed988e91a7ccd3e69fa60f7c563b1" kindref="member">getSolution</ref>());</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>follower_solutions.push_back(follower_bestSolution);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>save<sp/>the<sp/>best<sp/>solution<sp/>according<sp/>to<sp/>sum<sp/>wjUj<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(follower_solutions.begin(),<sp/>follower_solutions.end(),<sp/><ref refid="class_solution_1a288de811d67608261c580aedb527b1a4" kindref="member">Solution::smaller_wjUj</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1ade3f1122734e836c456d45a8f9cb8637" kindref="member">setSolution</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_solution" kindref="compound">Solution</ref>(follower_solutions[0]));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a9f7fc485cd3e1456dd1da5fe42e2f9c3" kindref="member">verbose</ref>.<ref refid="class_verbose_1acc7a995da9e05168fa881f0d3ada8250" kindref="member">setRequiredLevel</ref>(3);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a9f7fc485cd3e1456dd1da5fe42e2f9c3" kindref="member">verbose</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Best<sp/>among<sp/>all<sp/>solutions\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a05c42de4ad04ef3c761a72e87c9fbaab" kindref="member">solution</ref>-&gt;<ref refid="class_solution_1a607803e25a640ffda00025453b13f75b" kindref="member">compactVerbose</ref>();<sp/><ref refid="class_i_solver_1a9f7fc485cd3e1456dd1da5fe42e2f9c3" kindref="member">verbose</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a9f7fc485cd3e1456dd1da5fe42e2f9c3" kindref="member">verbose</ref>.<ref refid="class_verbose_1a48a6ad9f4c7d2541aa87fd3b9374c65d" kindref="member">endRequiredLevel</ref>();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Measuring<sp/>resolution<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::steady_clock::time_point<sp/>timeEnd<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a21331ea32a77680f92f8a8064a29ea4e" kindref="member">timeResol</ref><sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(timeEnd<sp/>-<sp/>timeStart).count();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a9f7fc485cd3e1456dd1da5fe42e2f9c3" kindref="member">verbose</ref>.<ref refid="class_verbose_1acc7a995da9e05168fa881f0d3ada8250" kindref="member">setRequiredLevel</ref>(2);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a9f7fc485cd3e1456dd1da5fe42e2f9c3" kindref="member">verbose</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Solution<sp/>found<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_i_solver_1a21331ea32a77680f92f8a8064a29ea4e" kindref="member">timeResol</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>microsecond(s)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_solver_1a9f7fc485cd3e1456dd1da5fe42e2f9c3" kindref="member">verbose</ref>.<ref refid="class_verbose_1a48a6ad9f4c7d2541aa87fd3b9374c65d" kindref="member">endRequiredLevel</ref>();</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">std::string<sp/><ref refid="class_l_solver_1a7aeaf0106bc569bb540676711fb043dd" kindref="member">LSolver::getHeuristicName</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="55"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\&quot;LSolver<sp/>-<sp/>Best<sp/>of<sp/>All<sp/>Decision<sp/>&amp;&amp;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_i_solver_1a7a89e270fa895524d4bf94cd10189bc8" kindref="member">subSolver</ref>-&gt;<ref refid="class_i_sub_solver_1a76eeec69a402acd777e21093cbcd7055" kindref="member">getHeuristicName</ref>()+</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">std::string<sp/><ref refid="class_l_solver_1a6b6374efc0c50839a8875e24e9b645f4" kindref="member">LSolver::getHeuristicDescription</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="60"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\&quot;Applying<sp/>the<sp/>selection<sp/>rules<sp/>:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_i_leader_select_rule" kindref="compound">ILeaderSelectRule</ref>*<sp/>selectRule<sp/>:<sp/><ref refid="class_i_solver_1a4efd4b920c5613c64a6dc4e4b13ee335" kindref="member">listRules</ref>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>+=<sp/>selectRule-&gt;getRuleName()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>description<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>and<sp/>selecting<sp/>the<sp/>best<sp/>solution<sp/>from<sp/>these<sp/>selection<sp/>rules&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>description<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_i_solver_1a7a89e270fa895524d4bf94cd10189bc8" kindref="member">subSolver</ref>-&gt;<ref refid="class_i_sub_solver_1a8bdaad5babdc23c22368cda377097e91" kindref="member">getHeuristicDescription</ref>()+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>description;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/benhi/source/repos/BiLevel_Scheduling_Industry_4.0/BiLevel_Scheduling_Industry_4.0/LSolver.cpp"/>
  </compounddef>
</doxygen>
